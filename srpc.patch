diff --git a/docs/specification.md b/docs/specification.md
index bed5ded..cd73bc2 100644
--- a/docs/specification.md
+++ b/docs/specification.md
@@ -63,6 +63,7 @@ A2A revolves around several key concepts. For detailed explanations, please refe
 - **Push Notifications:** Asynchronous task updates delivered via server-initiated HTTP POST requests to a client-provided webhook URL, for long-running or disconnected scenarios.
 - **Context:** An optional, server-generated identifier to logically group related tasks.
 - **Extension:** A mechanism for agents to provide additional functionality or data beyond the core A2A specification.
+- **Channels (Extension):** Durable multi-agent communication spaces (see [Multi-Agent Communications](./topics/multi-agent-communications.md)).
 
 ## 3. Transport and Format
 
@@ -77,7 +78,7 @@ A2A supports multiple transport protocols, all operating over **HTTP(S)**. Agent
 
 ### 3.2. Supported Transport Protocols
 
-A2A defines three core transport protocols. **A2A-compliant agents SHOULD implement at least one of these transport protocols. They MAY be compliant implementing a transport extension as defined in [3.2.4](#324-transport-extensions)** All three protocols are considered equal in status, and agents may choose to implement any combination of them based on their requirements.
+A2A defines three core transport protocols. **A2A-compliant agents SHOULD implement at least one of these transport protocols. They MAY alternatively implement a transport extension as defined in [3.2.4](#324-transport-extensions) (e.g. [SRPC](#325-srpc-transport-slim-rpc-extension))** All core transports are considered equal in status, and agents may choose to implement any combination of them based on their requirements.
 
 #### 3.2.1. JSON-RPC 2.0 Transport
 
@@ -121,6 +122,54 @@ Additional transport protocols **MAY** be defined as extensions to the core A2A
 - **MUST** be clearly documented and specified
 - **SHOULD** provide migration paths from core transports
 
+#### 3.2.5. SRPC Transport (Slim RPC Extension)
+
+The **SRPC (Slim RPC)** transport is an extension transport that enables high-performance asynchronous RPC semantics using the Slim RPC framework. SRPC reuses the **same Protocol Buffer service and message definitions** as the gRPC transport (`specification/grpc/a2a.proto`) and relies on the [`protoc-slimrpc-plugin`](https://github.com/agntcy/slim/tree/main/data-plane/slimrpc-compiler) to generate SRPC client and server stubs.
+
+SRPC is OPTIONAL. An agent implementing SRPC **MUST** also provide functional equivalence with at least one core transport (JSON-RPC, gRPC, or HTTP+JSON) unless explicitly declared as a transport-only specialization in its `AgentCard`.
+
+SRPC transport requirements:
+
+- **Service & Messages**: **MUST** use the canonical definitions in `specification/grpc/a2a.proto`. The file at `specification/srpc/a2a.proto` is a synchronized mirror for convenience; the gRPC version remains normative if divergence occurs.
+- **Feature Parity**: **MUST** provide identical RPC surface (method names, streaming shapes) as defined for gRPC.
+- **Error Mapping**: **MUST** map SRPC error codes to A2A error taxonomy consistent with gRPC status â†’ A2A error mapping.
+- **Streaming**: Bidirectional / server streaming patterns **MUST** match the gRPC streaming behaviors (message ordering, termination semantics, error propagation).
+- **Authentication**: **MUST** apply the same HTTP/TLS or shared-secret security declared in the `AgentCard`. SRPC-specific channel security parameters **MUST NOT** weaken declared transport security guarantees.
+- **Idempotency**: Where idempotency keys are used (future extension), semantics **MUST** align with other transports.
+- **Capability Declaration**: The agent **SHOULD** list an `additionalInterface` entry with `transport: "SRPC"` and an SRPC endpoint URL.
+
+Recommended code generation workflow (example):
+
+```bash
+protoc \
+  --plugin=protoc-slimrpc-plugin \
+  --slimrpc_out=. \
+  --python_out=. \
+  specification/grpc/a2a.proto
+```
+
+Buf example:
+
+```yaml
+# buf.gen.yaml (excerpt)
+version: v2
+plugins:
+  - local: protoc-slimrpc-plugin
+    out: generated
+  - remote: buf.build/protocolbuffers/python
+    out: generated
+```
+
+SRPC transport selection rules:
+
+- **Clients** detecting SRPC via `AgentInterface.transport == "SRPC"` **MAY** prefer it for low-latency streaming.
+- **Servers** **SHOULD** maintain compatibility and not introduce SRPC-only RPCs for core method categories.
+- **Fallback**: Clients **SHOULD** retain at least one core transport fallback.
+
+Security Note: If SRPC uses a shared secret, it **MUST** be distributed out-of-band consistent with the A2A security model and MUST NOT be embedded in the Agent Card.
+
+If future Slim RPC features introduce transport-only optimizations, they **MUST** be optional extensions and **MUST NOT** change normative A2A semantics.
+
 ### 3.3. Streaming Transport (Server-Sent Events)
 
 Streaming capabilities are **transport-specific**:
diff --git a/types/src/types.ts b/types/src/types.ts
index 127ed4b..118f401 100644
--- a/types/src/types.ts
+++ b/types/src/types.ts
@@ -319,6 +319,7 @@ export enum TransportProtocol {
   JSONRPC = "JSONRPC", // JSON-RPC 2.0 over HTTP (mandatory)
   GRPC = "GRPC", // gRPC over HTTP/2 (optional)
   HTTP_JSON = "HTTP+JSON", // REST-style HTTP with JSON (optional)
+  SRPC = "SRPC", // Slim RPC extension transport (optional)
 }
 // --8<-- [end:TransportProtocol]
 
