// Older protoc compilers don't understand edition yet.
syntax = "proto3";
package a2a.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "A2a.V1";
option go_package = "google.golang.org/a2a/v1";
option java_multiple_files = true;
option java_outer_classname = "ScopedA2A";
option java_package = "com.google.a2a.v1";

// A2AService defines the gRPC version of the Scoped A2A protocol. This has a
// slightly different shape than the JSONRPC version to better conform to
// AIP-127, where appropriate. The nouns are AgentCard, Message, Task and
// TaskPushNotificationConfig.
// - Messages are not a standard resource so there is no get/delete/update/list
//   interface, only a send and stream custom methods.
// - Tasks have a get interface and custom cancel and subscribe methods.
// - TaskPushNotificationConfig are a resource whose parent is a task.
//   They have get, list, create, and delete methods.
// - AgentCard is a static resource with only a get method.
service ScopedA2AService {
  // Send a message to the agent. This is a blocking call that will return the
  // task once it is completed, or a LRO if requested.
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (google.api.http) = {
      post: "/{scope=*}/v1/message:send"
      body: "*"
    };
    option (google.api.method_signature) = "scope";
  }
  // SendStreamingMessage is a streaming call that will return a stream of
  // task update events until the Task is in an interrupted or terminal state.
  rpc SendStreamingMessage(SendMessageRequest) returns (stream StreamResponse) {
    option (google.api.http) = {
      post: "/{scope=*}/v1/message:stream"
      body: "*"
    };
    option (google.api.method_signature) = "scope";
  }

  // Get the current state of a task from the agent.
  rpc GetTask(GetTaskRequest) returns (Task) {
    option (google.api.http) = {
      get: "/{scope=*}/v1/{name=tasks/*}"
    };
    option (google.api.method_signature) = "scope,name";
  }
  // Cancel a task from the agent. If supported one should expect no
  // more task updates for the task.
  rpc CancelTask(CancelTaskRequest) returns (Task) {
    option (google.api.http) = {
      post: "/{scope=*}/v1/{name=tasks/*}:cancel"
      body: "*"
    };
    option (google.api.method_signature) = "scope,name";
  }
  // TaskSubscription is a streaming call that will return a stream of task
  // update events. This attaches the stream to an existing in process task.
  // If the task is complete the stream will return the completed task (like
  // GetTask) and close the stream.
  rpc TaskSubscription(TaskSubscriptionRequest)
      returns (stream StreamResponse) {
    option (google.api.http) = {
      get: "/{scope=*}/v1/{name=tasks/*}:subscribe"
    };
    option (google.api.method_signature) = "scope,name";
  }

  // Set a push notification config for a task.
  rpc CreateTaskPushNotificationConfig(CreateTaskPushNotificationConfigRequest)
      returns (TaskPushNotificationConfig) {
    option (google.api.http) = {
      post: "/{scope=*}/v1/{parent=tasks/*/pushNotificationConfigs}"
      body: "config"
    };
    option (google.api.method_signature) = "scope,parent,config";
  }
  // Get a push notification config for a task.
  rpc GetTaskPushNotificationConfig(GetTaskPushNotificationConfigRequest)
      returns (TaskPushNotificationConfig) {
    option (google.api.http) = {
      get: "/{scope=*}/v1/{name=tasks/*/pushNotificationConfigs/*}"
    };
    option (google.api.method_signature) = "scope,name";
  }
  // Get a list of push notifications configured for a task.
  rpc ListTaskPushNotificationConfig(ListTaskPushNotificationConfigRequest)
      returns (ListTaskPushNotificationConfigResponse) {
    option (google.api.http) = {
      get: "/{scope=*}/v1/{parent=tasks/*}/pushNotificationConfigs"
    };
    option (google.api.method_signature) = "scope,parent";
  }
  // GetAgentCard returns the agent card for the agent.
  rpc GetAgentCard(GetAgentCardRequest) returns (AgentCard) {
    option (google.api.http) = {
      get: "/{scope=*}/v1/card"
    };
    option (google.api.method_signature) = "scope";
  }
  // Delete a push notification config for a task.
  rpc DeleteTaskPushNotificationConfig(DeleteTaskPushNotificationConfigRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/{scope=*}/v1/{name=tasks/*/pushNotificationConfigs/*}"
    };
    option (google.api.method_signature) = "scope,name";
  }
}
